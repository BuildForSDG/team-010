{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["response","ResponseGenerator","AuthController","signup","req","res","email","body","foundUser","database","User","findOne","where","status","json","message","password","GeneralUtils","hash","newUser","create","result","toJSON","token","Auth","signJwt","verificationURL","protocol","get","subject","sendSuccess","sendError","err","isVerified","params","decoded","decodeJwt","update","id","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,QAAQ,GAAG,IAAIC,iBAAJ,EAAjB;;AAEA,MAAMC,cAAN,CAAqB;AACnB;;;;;;AAOA,eAAaC,MAAb,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAC5B,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAYF,GAAG,CAACG,IAAtB;AACA,YAAMC,SAAS,GAAG,MAAMC,eAASC,IAAT,CAAcC,OAAd,CAAsB;AAC5CC,QAAAA,KAAK,EAAE;AAAEN,UAAAA;AAAF;AADqC,OAAtB,CAAxB;;AAGA,UAAIE,SAAJ,EAAe;AACbH,QAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,UAAAA,MAAM,EAAE,OADW;AAEnBE,UAAAA,OAAO,EAAE;AAFU,SAArB;AAID;;AACDX,MAAAA,GAAG,CAACG,IAAJ,CAASS,QAAT,GAAoB,MAAMC,iBAAaC,IAAb,CAAkBd,GAAG,CAACG,IAAJ,CAASS,QAA3B,CAA1B;AACA,YAAMG,OAAO,GAAG,MAAMV,eAASC,IAAT,CAAcU,MAAd,CAAqBhB,GAAG,CAACG,IAAzB,CAAtB;AACA,YAAMc,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AACA,YAAMC,KAAK,GAAGC,cAAKC,OAAL,CAAaJ,MAAb,CAAd;;AACA,aAAOA,MAAM,CAACL,QAAd;;AACA,UAAIK,MAAM,CAACf,KAAX,EAAkB;AAChB;AACA,cAAMoB,eAAe,GAAI,GAAEtB,GAAG,CAACuB,QAAS,MAAKvB,GAAG,CAACwB,GAAJ,CAAQ,MAAR,CAAgB,6BAA4BL,KAAM,EAA/F;AAEA,cAAMR,OAAO,GAAI,+CAA8CW,eAAgB,EAA/E;AACA,cAAM,oBAAU;AACdpB,UAAAA,KAAK,EAAEe,MAAM,CAACf,KADA;AAEduB,UAAAA,OAAO,EAAE,sCAFK;AAGdd,UAAAA;AAHc,SAAV,CAAN;AAKA,eAAOf,QAAQ,CAAC8B,WAAT,CAAqBzB,GAArB,EAA0B,GAA1B,EAA+B;AACpCkB,UAAAA,KADoC;AAEpC,aAAGF;AAFiC,SAA/B,CAAP;AAID;;AACD,aAAOrB,QAAQ,CAAC+B,SAAT,CAAmB1B,GAAnB,EAAwB,GAAxB,EAA6B,sBAA7B,CAAP;AACD,KAhCD,CAgCE,OAAO2B,GAAP,EAAY;AACZ,aAAOhC,QAAQ,CAAC+B,SAAT,CAAmB1B,GAAnB,EAAwB,GAAxB,EAA6B2B,GAAG,CAACjB,OAAjC,CAAP;AACD;AACF;AAED;;;;;;AAKA,eAAakB,UAAb,CAAwB7B,GAAxB,EAA6BC,GAA7B,EAAkC;AAChC,QAAI;AACF,YAAM;AAAEkB,QAAAA;AAAF,UAAYnB,GAAG,CAAC8B,MAAtB;AACA,YAAMC,OAAO,GAAG,MAAMX,cAAKY,SAAL,CAAeb,KAAf,CAAtB;AACA,YAAMd,eAASC,IAAT,CAAc2B,MAAd,CAAqB;AAAEJ,QAAAA,UAAU,EAAE;AAAd,OAArB,EAA2C;AAAErB,QAAAA,KAAK,EAAE;AAAE0B,UAAAA,EAAE,EAAEH,OAAO,CAACG;AAAd;AAAT,OAA3C,CAAN;AACA,aAAOjC,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,QAAAA,MAAM,EAAE,SADkB;AAE1BE,QAAAA,OAAO,EAAE;AAFiB,OAArB,CAAP;AAID,KARD,CAQE,OAAOwB,KAAP,EAAc;AACd,aAAOvC,QAAQ,CAAC+B,SAAT,CAAmB1B,GAAnB,EAAwB,GAAxB,EAA6B,qDAA7B,CAAP;AACD;AACF;;AA/DkB;;eAkENH,c","sourcesContent":["import database from '../models/index';\nimport ResponseGenerator from '../utils/response.utilities';\nimport GeneralUtils from '../utils/general.utilities';\nimport Auth from '../middlewares/auth.middleware';\nimport sendEmail from '../services/email.service';\n\nconst response = new ResponseGenerator();\n\nclass AuthController {\n  /**\n   * @param {object} request express request object\n   * @param {object} response express request object\n   * @returns {json} json\n   * @memberof UserController\n   */\n\n  static async signup(req, res) {\n    try {\n      const { email } = req.body;\n      const foundUser = await database.User.findOne({\n        where: { email }\n      });\n      if (foundUser) {\n        res.status(400).json({\n          status: 'error',\n          message: 'Email is already in use'\n        });\n      }\n      req.body.password = await GeneralUtils.hash(req.body.password);\n      const newUser = await database.User.create(req.body);\n      const result = newUser.toJSON();\n      const token = Auth.signJwt(result);\n      delete result.password;\n      if (result.email) {\n        // 3) Send verification link  to user's email\n        const verificationURL = `${req.protocol}://${req.get('host')}/api/v1/auth/verification/${token}`;\n\n        const message = ` Click on this link to verify your account: ${verificationURL}`;\n        await sendEmail({\n          email: result.email,\n          subject: 'Your link only (valid for some mins)',\n          message\n        });\n        return response.sendSuccess(res, 201, {\n          token,\n          ...result\n        });\n      }\n      return response.sendError(res, 500, 'Something went wrong');\n    } catch (err) {\n      return response.sendError(res, 400, err.message);\n    }\n  }\n\n  /** verify User by email\n   * @description Operate on a user and his account\n   * @param {object} user object is updated\n   */\n\n  static async isVerified(req, res) {\n    try {\n      const { token } = req.params;\n      const decoded = await Auth.decodeJwt(token);\n      await database.User.update({ isVerified: true }, { where: { id: decoded.id } });\n      return res.status(200).json({\n        status: 'success',\n        message: 'your account has been verified, Welcome'\n      });\n    } catch (error) {\n      return response.sendError(res, 500, 'Your token is wrong or has expired try again later!');\n    }\n  }\n}\n\nexport default AuthController;\n"],"file":"auth.controller.js"}