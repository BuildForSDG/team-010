{"version":3,"sources":["../../src/utils/general.utilities.js"],"names":["dotenv","config","General","compare","password","userPassword","bcrypt","compareSync","hash","hashSync","signToken","id","jwt","sign","process","env","SECRET_KEY","expiresIn","JWT_EXPIRES_IN","stripNull","obj","cleanObj","Object","keys","forEach","val","newVal"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEAA,gBAAOC,MAAP;;AAEA,MAAMC,OAAO,GAAG;AACd;;;;;;AAMAC,EAAAA,OAAO,CAACC,QAAD,EAAWC,YAAX,EAAyB;AAC9B,WAAOC,gBAAOC,WAAP,CAAmBH,QAAnB,EAA6BC,YAA7B,CAAP;AACD,GATa;;AAWd;;;;;AAKA,QAAMG,IAAN,CAAWJ,QAAX,EAAqB;AACnB;AACA,WAAOE,gBAAOG,QAAP,CAAgBL,QAAhB,EAA0B,EAA1B,CAAP;AACD,GAnBa;;AAqBd;;;;;AAKAM,EAAAA,SAAS,CAACC,EAAD,EAAK;AACZ,WAAOC,sBAAIC,IAAJ,CAAS;AAAEF,MAAAA;AAAF,KAAT,EAAiBG,OAAO,CAACC,GAAR,CAAYC,UAA7B,EAAyC;AAAEC,MAAAA,SAAS,EAAEH,OAAO,CAACC,GAAR,CAAYG;AAAzB,KAAzC,CAAP;AACD,GA5Ba;;AA6Bd;;;;;AAKAC,EAAAA,SAAS,CAACC,GAAD,EAAM;AACb,QAAIC,QAAQ,GAAG,EAAf;AAEAC,IAAAA,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,OAAjB,CAA0BC,GAAD,IAAS;AAChC,YAAMC,MAAM,GAAGN,GAAG,CAACK,GAAD,CAAlB;AACAJ,MAAAA,QAAQ,GAAGK,MAAM,GAAG,EAAE,GAAGL,QAAL;AAAe,SAACI,GAAD,GAAOC;AAAtB,OAAH,GAAoCL,QAArD;AACD,KAHD;AAKA,WAAOA,QAAP;AACD;;AA3Ca,CAAhB;eA+CenB,O","sourcesContent":["import bcrypt from 'bcrypt';\nimport dotenv from 'dotenv';\nimport jwt from 'jsonwebtoken';\n\ndotenv.config();\n\nconst General = {\n  /**\n   * @description - validate password by comparing password with hash password\n   * @param {string} password\n   * @param {string} hashpassword\n   * @returns {boolean} boolean to show if password match or not\n   */\n  compare(password, userPassword) {\n    return bcrypt.compareSync(password, userPassword);\n  },\n\n  /**\n   * @description - encypt password\n   * @param { String} password\n   * @returns {String} hashpassword\n   */\n  async hash(password) {\n    // const salt = bcrypt.genSaltSync(12);\n    return bcrypt.hashSync(password, 12);\n  },\n\n  /**\n   * @description - encypt password\n   * @param { String} password\n   * @returns {String} hashpassword\n   */\n  signToken(id) {\n    return jwt.sign({ id }, process.env.SECRET_KEY, { expiresIn: process.env.JWT_EXPIRES_IN });\n  },\n  /**\n   * @description - remove null key from  object\n   * @param {object}\n   * @returns {object}\n   */\n  stripNull(obj) {\n    let cleanObj = {};\n\n    Object.keys(obj).forEach((val) => {\n      const newVal = obj[val];\n      cleanObj = newVal ? { ...cleanObj, [val]: newVal } : cleanObj;\n    });\n\n    return cleanObj;\n  }\n\n};\n\nexport default General;\n"],"file":"general.utilities.js"}