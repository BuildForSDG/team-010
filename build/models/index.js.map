{"version":3,"sources":["../../src/models/index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","config","configJson","db","sequelize","Sequelize","DB_NAME_PROD","DB_USER","DB_PASS","host","DB_HOST","port","DB_PORT","dialect","dialectOption","ssl","native","logging","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","import","join","name","Object","keys","modelName","associate"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,QAAQ,GAAGC,cAAKD,QAAL,CAAcE,UAAd,CAAjB;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,GAAuBD,OAAO,CAACD,GAAR,CAAYE,QAAnC,GAA8C,aAA1D;AAEA,MAAMC,MAAM,GAAGC,gBAAWJ,GAAX,CAAf,C,CAEA;;AAEA,MAAMK,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAIN,GAAG,KAAK,YAAZ,EAA0B;AACxBM,EAAAA,SAAS,GAAG,IAAIC,kBAAJ,CAAcN,OAAO,CAACD,GAAR,CAAYQ,YAA1B,EAAwCP,OAAO,CAACD,GAAR,CAAYS,OAApD,EAA6DR,OAAO,CAACD,GAAR,CAAYU,OAAzE,EAAkF;AAC5FC,IAAAA,IAAI,EAAEV,OAAO,CAACD,GAAR,CAAYY,OAD0E;AAE5FC,IAAAA,IAAI,EAAEZ,OAAO,CAACD,GAAR,CAAYc,OAF0E;AAG5FC,IAAAA,OAAO,EAAE,UAHmF;AAI5FC,IAAAA,aAAa,EAAE;AACbC,MAAAA,GAAG,EAAE,IADQ;AAEbC,MAAAA,MAAM,EAAE;AAFK,KAJ6E;AAQ5FC,IAAAA,OAAO,EAAE;AARmF,GAAlF,CAAZ;AAUD,CAXD,MAWO;AACLb,EAAAA,SAAS,GAAG,IAAIC,kBAAJ,CAAcJ,MAAM,CAACiB,QAArB,EAA+BjB,MAAM,CAACkB,QAAtC,EAAgDlB,MAAM,CAACmB,QAAvD,EAAiEnB,MAAjE,CAAZ;AACD;;AAEDoB,YAAGC,WAAH,CAAeC,SAAf,EACGC,MADH,CACWC,IAAD,IAAUA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAtB,IAA2BD,IAAI,KAAK9B,QAApC,IAAgD8B,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KADvF,EAEGC,OAFH,CAEYH,IAAD,IAAU;AACjB,QAAMI,KAAK,GAAGzB,SAAS,CAAC0B,MAAV,CAAiBlC,cAAKmC,IAAL,CAAUR,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAtB,EAAAA,EAAE,CAAC0B,KAAK,CAACG,IAAP,CAAF,GAAiBH,KAAjB;AACD,CALH;;AAOAI,MAAM,CAACC,IAAP,CAAY/B,EAAZ,EAAgByB,OAAhB,CAAyBO,SAAD,IAAe;AACrC,MAAIhC,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BjC,IAAAA,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAd,CAAwBjC,EAAxB;AACD;AACF,CAJD;AAMAA,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACE,SAAH,GAAeA,kBAAf;eAEeF,E","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport Sequelize from 'sequelize';\nimport configJson from '../config/config';\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV ? process.env.NODE_ENV : 'development';\n\nconst config = configJson[env];\n\n// console.log('this is the environment: ', env);\n\nconst db = {};\n\nlet sequelize;\nif (env === 'production') {\n  sequelize = new Sequelize(process.env.DB_NAME_PROD, process.env.DB_USER, process.env.DB_PASS, {\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    dialect: 'postgres',\n    dialectOption: {\n      ssl: true,\n      native: true\n    },\n    logging: false\n  });\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nfs.readdirSync(__dirname)\n  .filter((file) => file.indexOf('.') !== 0 && file !== basename && file.slice(-3) === '.js')\n  .forEach((file) => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;\n"],"file":"index.js"}