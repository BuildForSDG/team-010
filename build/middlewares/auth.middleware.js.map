{"version":3,"sources":["../../src/middlewares/auth.middleware.js"],"names":["response","ResponseGenerator","Authentication","authenticate","req","res","next","payload","consumeToken","status","sendError","message","user","restrictTo","roles","includes","body","role","json","signJwt","id","iat","unix","exp","add","jwt","sign","keys","secret","decodeJwt","token","decode","bearer","result","headers","authorization","split","type"],"mappings":"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","sourcesContent":["import moment from 'moment';\nimport jwt from 'jsonwebtoken';\nimport ResponseGenerator from '../utils/response.utilities';\nimport keys from '../utils/config.utilities';\n\nconst response = new ResponseGenerator();\n\nclass Authentication {\n  /**\n   * @description - use for decoding authorization token\n   *\n   * @param {Object} request\n   * @param {Object} response\n   * @param {Function} next\n   *\n   * @returns {Object} Object\n   */\n  static async authenticate(req, res, next) {\n    const payload = await Authentication.consumeToken(req);\n    if (payload.status && payload.status !== 200) {\n      return response.sendError(res, payload.status, payload.message);\n    }\n    req.user = payload;\n    return next();\n  }\n\n  static restrictTo(...roles) {\n    return (req, res, next) => {\n      // roles ['admin', 'lead-guide'].\n      if (!roles.includes(req.body.role)) {\n        return next(\n          res.status(403).json({\n            status: 'error',\n            message: 'You do not have permission to perform this action'\n          })\n        );\n      }\n\n      return next();\n    };\n  }\n\n  /** Create a JWT\n   * @param user\n   */\n\n  static signJwt(user) {\n    const payload = {\n      id: user.id,\n      role: user.role,\n      iat: moment().unix(),\n      exp: moment()\n        .add(1, 'days')\n        .unix()\n    };\n    return jwt.sign(payload, keys.secret);\n  }\n\n  static decodeJwt(token) {\n    let payload = null;\n    payload = jwt.decode(token, keys.secret);\n    return payload;\n  }\n\n  static bearer(token) {\n    const payload = this.decodeJwt(token);\n    return payload;\n  }\n\n  static async consumeToken(req) {\n    const result = {};\n    if (!req.headers.authorization) {\n      result.status = 401;\n      result.message = 'Please make sure your request has an authorization header';\n      return result;\n    }\n    const token = req.headers.authorization.split(' ')[1];\n    const type = req.headers.authorization.split(' ')[0];\n\n    let payload;\n    switch (type) {\n      case 'Bearer':\n        payload = Authentication.bearer(token);\n        break;\n      default:\n        result.status = 401;\n        result.message = 'Invalid token type, Must be type Bearer';\n        return result;\n    }\n    if (!payload) {\n      result.status = 401;\n      result.message = 'Authorization Denied.';\n      return result;\n    }\n\n    if (payload.exp <= moment().unix()) {\n      result.status = 401;\n      result.message = 'Token has expired';\n      return result;\n    }\n    return payload;\n  }\n}\nexport default Authentication;\n"],"file":"auth.middleware.js"}